# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–∞—Ö –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.
# üìå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã: "–ö–Ω–∏–≥–∏" –∏ "–ê–≤—Ç–æ—Ä—ã".
# üìå –í —Ç–∞–±–ª–∏—Ü–µ "–ö–Ω–∏–≥–∏" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id, –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è,
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏ id –∞–≤—Ç–æ—Ä–∞.
# üìå –í —Ç–∞–±–ª–∏—Ü–µ "–ê–≤—Ç–æ—Ä—ã" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è.
# üìå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ "–ö–Ω–∏–≥–∏" –∏ "–ê–≤—Ç–æ—Ä—ã".
# üìå –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ —Å
# —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Ö –∞–≤—Ç–æ—Ä–æ–≤.

from flask import Flask, render_template

from .model import db, Author, Book

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///library.db'
db.init_app(app)


@app.route('/')
def index():
    return render_template('base.html')


@app.cli.command("init-db")
def init_db():
    db.create_all()
    print('OK')


@app.cli.command("add-auth")
def add_auth():
    author = {
        '1': ("–õ–µ–≤", "–¢–æ–ª—Å–ª–æ–π"),
        '2': ("–ú–µ—Ç—å—é", "–§–∞—É–ª–µ—Ä"),
        '3': ("–ê–Ω—Ç–æ–Ω–∏–æ", "–ú–µ–ª–ª–µ")
    }

    for auth in author.values():
        auth = Author(name=auth[0], surname=auth[1])
        db.session.add(auth)
        db.session.commit()

    print('author_add')


@app.cli.command("add-book")
def add_book():
    book = {
        '1': {
            '–í–æ–π–Ω–∞ –∏ –ú–∏—Ä–∞': ('1869', 5, 1),
            '–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞': ('1877', 3, 1),
            '–ò—Å–ø–æ–≤–µ–¥—å': ('1884', 2, 1),
        },
        '2': {
            'Asyncio –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': ('2023', 4, 2),
        },
        '3': {
            'Django': ('2020', 2, 3),
        }
    }

    for book in book.values():
        for title, date in book.items():
            book = Book(title=title,
                        year=date[0],
                        count=date[1],
                        id_auth=date[2])
            db.session.add(book)
            db.session.commit()

    print('book_add')


@app.route("/list-book/")
def list_book():
    books = Book.query.all()

    list_bok = []
    for book in books:
        author = Author.query.filter(Author.id == book.id_auth).all()
        list_bok.append(f'{book.title} {author[0]}')
    context = {'books': list_bok, }
    return render_template('list_book.html', **context)


if __name__ == '__main__':
    app.run(debug=True)
