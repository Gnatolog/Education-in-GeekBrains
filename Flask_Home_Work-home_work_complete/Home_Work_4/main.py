# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ7
# üêÄ –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å
# —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∏–∑ 1000000 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
# üêÄ –ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...]
# üêÄ –ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏
# –æ—Ç 1 –¥–æ 100.
# üêÄ –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å,
# –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç—å –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å.
# üêÄ –í –∫–∞–∂–¥–æ–º —Ä–µ—à–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

# –ú–∞—Å—Å–∏–≤ –ø–µ—Ä–≤–æ–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Å –ø–æ—Å–ª–µ –ø–æ–¥–∞–µ–º –Ω–∞
# –æ–±—Ä–∞–±–æ—Ç–∫—É —á—Ç–æ –±—ã –º–∞—Å—Å–∏–≤ –±—ã–ª –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π
# –ü–æ–¥–∞—ë–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –∞ –ø–æ —á–∞—Å—Ç—è–º

from random import randint
import time
import threading
import multiprocessing
import asyncio

arr = [randint(1, 101) for i in range(0, 1_000_001)]

part_arr = len(arr) // 3

arr_1 = arr[:part_arr]
arr_2 = arr[part_arr: part_arr * 2]
arr_3 = arr[part_arr * 2:]
list_array = [arr_1, arr_2, arr_3]

all_sum = 0


def synchro_sum():
    global all_sum
    start_time = time.time()

    for array in list_array:
        for num in array:
            all_sum += num

    time_work = time.time() - start_time
    sum_arr = all_sum
    all_sum = 0
    return f' Synchro sum = {sum_arr} time = {time_work:.2f}'


def multithreading_sum(arr):
    global all_sum
    for i in arr:
        all_sum += i


def multithreading():
    global list_array
    start_time = time.time()
    threads = []
    for i in range(3):
        t = threading.Thread(target=multithreading_sum, args=[list_array[i]])
        threads.append(t)
        t.start()

    for t in threads:
        t.join()
    time_work = time.time() - start_time
    return f' Multhithreding = {all_sum},  time = {time_work:.2f}'


def multiprocessing_sum(arr):
    global all_sum
    for i in arr:
        all_sum += i


def multiprocess():
    global list_array
    start_time = time.time()
    processes = []
    for i in range(3):
        p = multiprocessing.Process(target=multithreading_sum, args=[list_array[i]])
        processes.append(p)
        p.start()

    for p in processes:
        p.join()
    time_work = time.time() - start_time
    return f' Multiprocess = {all_sum},  time = {time_work:.2f}'


async def async_sum(arr):
    all_sum = 0
    for i in arr:
        all_sum += i

    return all_sum

async def main():
    start_time = time.time()
    await asyncio.gather(async_sum(arr_1), async_sum(arr_2), async_sum(arr_3))

    time_work = time.time() - start_time
    return f' Asynchro = {all_sum},  time = {time_work:.2f}'


print(synchro_sum())
print(multithreading())
print(multiprocess())
print(asyncio.run(main()))
